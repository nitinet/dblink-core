import * as sql from './sql/index.js';
export default class Handler {
    config;
    constructor(config) {
        this.config = config;
    }
    init() {
        return Promise.resolve();
    }
    getReturnColumnsStr(returnColumns) {
        return 'return ' + returnColumns.map(col => col.toString()).join(', ');
    }
    serializeValue(val, dataType) {
        return val;
    }
    deSerializeValue(val, dataType) {
        return val;
    }
    prepareQuery(queryStmt) {
        let query;
        const dataArgs = [];
        if (Array.isArray(queryStmt)) {
            const tempQueries = [];
            queryStmt.forEach(a => {
                if (!(a instanceof sql.Statement))
                    throw new Error('Invalid Statement');
                const { query, args } = a.eval(this);
                tempQueries.push(query);
                dataArgs.push(...args);
            });
            query = tempQueries.join('; ').concat(';');
        }
        else if (queryStmt instanceof sql.Statement) {
            const { query: stmtQuery, args } = queryStmt.eval(this);
            query = stmtQuery;
            dataArgs.push(...args);
        }
        else {
            throw new Error('Invalid Statement');
        }
        return { query, dataArgs };
    }
    binaryExpr(lhs, op, rhs) {
        return `${lhs} ${op} ${rhs}`;
    }
    wrapExpressions(values) {
        return values.filter(Boolean).map(val => `(${val})`);
    }
    eq(val0, val1) {
        return this.binaryExpr(val0, '=', val1);
    }
    neq(val0, val1) {
        return this.binaryExpr(val0, '!=', val1);
    }
    lt(val0, val1) {
        return this.binaryExpr(val0, '<', val1);
    }
    gt(val0, val1) {
        return this.binaryExpr(val0, '>', val1);
    }
    lteq(val0, val1) {
        return this.binaryExpr(val0, '<=', val1);
    }
    gteq(val0, val1) {
        return this.binaryExpr(val0, '>=', val1);
    }
    and(values) {
        return this.wrapExpressions(values).join(' and ');
    }
    or(values) {
        return this.wrapExpressions(values).join(' or ');
    }
    not(val0) {
        return ` not ${val0}`;
    }
    in(values) {
        const lhs = values[0];
        const rhs = values.slice(1).join(', ');
        return `${lhs} in (${rhs})`;
    }
    between(val0, val1, val2) {
        return `${val0} between ${val1} and ${val2}`;
    }
    like(val0, val1) {
        return this.binaryExpr(val0, 'like', val1);
    }
    isNull(val0) {
        return `${val0} is null`;
    }
    isNotNull(val0) {
        return `${val0} is not null`;
    }
    exists(val0) {
        return ` exists (${val0})`;
    }
    limit(size, index) {
        const indexStr = index ? `${index}, ` : '';
        return `limit ${indexStr}${size}`;
    }
    plus(val0, val1) {
        return this.binaryExpr(val0, '+', val1);
    }
    minus(val0, val1) {
        return this.binaryExpr(val0, '-', val1);
    }
    multiply(val0, val1) {
        return this.binaryExpr(val0, '*', val1);
    }
    devide(val0, val1) {
        return this.binaryExpr(val0, '/', val1);
    }
    asc(val0) {
        return `${val0} asc`;
    }
    desc(val0) {
        return `${val0} desc`;
    }
    sum(val0) {
        return `sum(${val0})`;
    }
    min(val0) {
        return `min(${val0})`;
    }
    max(val0) {
        return `max(${val0})`;
    }
    count(val0) {
        return `count(${val0})`;
    }
    average(val0) {
        return `avg(${val0})`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxLQUFLLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQztBQVd0QyxNQUFNLENBQUMsT0FBTyxPQUFnQixPQUFPO0lBTW5DLE1BQU0sQ0FBVTtJQVFoQixZQUFZLE1BQWU7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQU9ELElBQUk7UUFDRixPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBUUQsbUJBQW1CLENBQUMsYUFBMEI7UUFDNUMsT0FBTyxTQUFTLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBR0QsY0FBYyxDQUFDLEdBQVksRUFBRSxRQUErQjtRQUUxRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFHRCxnQkFBZ0IsQ0FBQyxHQUFZLEVBQUUsUUFBK0I7UUFFNUQsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBMkZTLFlBQVksQ0FBQyxTQUEwQztRQUkvRCxJQUFJLEtBQWEsQ0FBQztRQUNsQixNQUFNLFFBQVEsR0FBYyxFQUFFLENBQUM7UUFFL0IsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7WUFDN0IsTUFBTSxXQUFXLEdBQWEsRUFBRSxDQUFDO1lBQ2pDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxHQUFHLENBQUMsU0FBUyxDQUFDO29CQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztnQkFFeEUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJ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